apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java-library-distribution'
apply plugin:'application'
startScripts.enabled = false

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile group: 'com.google.guava', name: 'guava', version: '27.1-jre'
    compile group: 'com.google.inject', name: 'guice', version: '4.2.2'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.560'
    compile group: 'info.picocli', name: 'picocli', version: '3.9.6'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.9.1'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.16.0'
}

test {
    maxHeapSize "512m"
    testLogging.showStandardStreams = true
}

javadoc {
    options.addStringOption("notimestamp", "com.scalar.backup.cassandra")
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task testJar(type: Jar) {
  classifier = 'tests'
  from sourceSets.test.output
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }  // ensures integration tests are run every time when called
    shouldRunAfter test
}

task BackupCommand(type: CreateStartScripts) {
    mainClassName = 'com.scalar.backup.cassandra.command.BackupCommand'
    applicationName = 'cassandra-backup'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task RestoreCommand(type: CreateStartScripts) {
    mainClassName = 'com.scalar.backup.cassandra.command.RestoreCommand'
    applicationName = 'cassandra-restore'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(BackupCommand)
    from(RestoreCommand)
    fileMode = 0755
}

// build should not depend on the integration tests
check.dependsOn -= integrationTest

sourceCompatibility = 1.8
targetCompatibility = 1.8

